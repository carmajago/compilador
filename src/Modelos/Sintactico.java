
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Mar 23 14:04:26 COT 2017
//----------------------------------------------------

package Modelos;

import Vistas.Main;
import java_cup.runtime.Symbol;
import javax.swing.JTextPane;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Mar 23 14:04:26 COT 2017
  */
public class Sintactico extends java_cup.runtime.lr_parser {
    JTextPane consola;

    public void setConsola(JTextPane consola) {
        this.consola = consola;
    }

   
    
  /** Default constructor. */
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\122\000\002\002\004\000\002\054\002\000\002\055" +
    "\002\000\002\002\012\000\002\056\002\000\002\003\011" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\002\000\002\005\011\000\002" +
    "\006\011\000\002\007\011\000\002\010\011\000\002\011" +
    "\004\000\002\011\002\000\002\012\006\000\002\013\006" +
    "\000\002\013\002\000\002\014\003\000\002\014\002\000" +
    "\002\057\002\000\002\015\012\000\002\016\004\000\002" +
    "\016\002\000\002\017\011\000\002\020\004\000\002\020" +
    "\002\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\022\011\000\002" +
    "\023\011\000\002\024\011\000\002\025\012\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\002" +
    "\000\002\027\007\000\002\030\011\000\002\031\011\000" +
    "\002\032\011\000\002\033\004\000\002\033\002\000\002" +
    "\034\010\000\002\053\005\000\002\053\002\000\002\035" +
    "\005\000\002\035\002\000\002\036\005\000\002\036\002" +
    "\000\002\037\005\000\002\037\002\000\002\040\005\000" +
    "\002\040\002\000\002\041\005\000\002\041\002\000\002" +
    "\042\003\000\002\042\003\000\002\042\003\000\002\043" +
    "\004\000\002\043\002\000\002\044\010\000\002\045\005" +
    "\000\002\045\002\000\002\046\004\000\002\046\002\000" +
    "\002\047\007\000\002\050\003\000\002\050\003\000\002" +
    "\050\003\000\002\050\003\000\002\051\004\000\002\051" +
    "\002\000\002\052\013" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\320\000\004\004\005\001\002\000\004\002\322\001" +
    "\002\000\004\021\000\001\002\000\004\021\007\001\002" +
    "\000\004\022\ufffd\001\002\000\004\027\012\001\002\000" +
    "\004\061\174\001\002\000\004\017\uffeb\001\002\000\004" +
    "\017\014\001\002\000\024\012\uffc8\020\uffc8\024\016\025" +
    "\uffc8\034\uffc8\037\uffc8\040\uffc8\047\uffc8\066\uffc8\001\002" +
    "\000\004\020\051\001\002\000\004\016\047\001\002\000" +
    "\030\012\uffc6\020\uffc6\025\021\026\uffc6\034\uffc6\037\uffc6" +
    "\040\uffc6\047\uffc6\050\uffc6\053\uffc6\066\uffc6\001\002\000" +
    "\026\012\uffc4\020\uffc4\026\uffc4\034\024\037\uffc4\040\uffc4" +
    "\047\uffc4\050\uffc4\053\uffc4\066\uffc4\001\002\000\004\016" +
    "\022\001\002\000\004\055\023\001\002\000\026\012\uffc7" +
    "\020\uffc7\026\uffc7\034\uffc7\037\uffc7\040\uffc7\047\uffc7\050" +
    "\uffc7\053\uffc7\066\uffc7\001\002\000\004\016\045\001\002" +
    "\000\024\012\027\020\uffc2\026\uffc2\037\030\040\026\047" +
    "\uffc2\050\uffc2\053\uffc2\066\uffc2\001\002\000\004\016\uffbf" +
    "\001\002\000\004\016\uffc1\001\002\000\004\016\uffc0\001" +
    "\002\000\016\020\uffca\026\uffca\047\035\050\uffca\053\uffca" +
    "\066\uffca\001\002\000\004\016\033\001\002\000\004\054" +
    "\034\001\002\000\016\020\uffc3\026\uffc3\047\uffc3\050\uffc3" +
    "\053\uffc3\066\uffc3\001\002\000\004\016\043\001\002\000" +
    "\014\020\uffcc\026\uffcc\050\uffcc\053\uffcc\066\040\001\002" +
    "\000\012\020\uffce\026\uffce\050\uffce\053\uffce\001\002\000" +
    "\004\016\041\001\002\000\004\065\042\001\002\000\012" +
    "\020\uffcd\026\uffcd\050\uffcd\053\uffcd\001\002\000\004\054" +
    "\044\001\002\000\014\020\uffcb\026\uffcb\050\uffcb\053\uffcb" +
    "\066\uffcb\001\002\000\004\054\046\001\002\000\024\012" +
    "\uffc5\020\uffc5\026\uffc5\037\uffc5\040\uffc5\047\uffc5\050\uffc5" +
    "\053\uffc5\066\uffc5\001\002\000\004\055\050\001\002\000" +
    "\030\012\uffc9\020\uffc9\025\uffc9\026\uffc9\034\uffc9\037\uffc9" +
    "\040\uffc9\047\uffc9\050\uffc9\053\uffc9\066\uffc9\001\002\000" +
    "\026\005\063\006\054\007\066\010\057\011\073\035\uffe5" +
    "\036\056\041\067\042\053\063\uffe5\001\002\000\030\005" +
    "\uffe0\006\uffe0\007\uffe0\010\uffe0\011\uffe0\035\uffe0\036\uffe0" +
    "\041\uffe0\042\uffe0\063\uffe0\064\uffe0\001\002\000\004\017" +
    "\170\001\002\000\004\017\162\001\002\000\030\005\uffe4" +
    "\006\uffe4\007\uffe4\010\uffe4\011\uffe4\035\uffe4\036\uffe4\041" +
    "\uffe4\042\uffe4\063\uffe4\064\uffe4\001\002\000\004\017\154" +
    "\001\002\000\004\017\146\001\002\000\030\005\uffe3\006" +
    "\uffe3\007\uffe3\010\uffe3\011\uffe3\035\uffe3\036\uffe3\041\uffe3" +
    "\042\uffe3\063\uffe3\064\uffe3\001\002\000\030\005\uffe2\006" +
    "\uffe2\007\uffe2\010\uffe2\011\uffe2\035\uffe2\036\uffe2\041\uffe2" +
    "\042\uffe2\063\uffe2\064\uffe2\001\002\000\006\035\133\063" +
    "\uffe8\001\002\000\004\017\125\001\002\000\030\005\uffe1" +
    "\006\uffe1\007\uffe1\010\uffe1\011\uffe1\035\uffe1\036\uffe1\041" +
    "\uffe1\042\uffe1\063\uffe1\064\uffe1\001\002\000\030\005\uffde" +
    "\006\uffde\007\uffde\010\uffde\011\uffde\035\uffde\036\uffde\041" +
    "\uffde\042\uffde\063\uffde\064\uffde\001\002\000\004\017\117" +
    "\001\002\000\004\017\105\001\002\000\030\005\uffdd\006" +
    "\uffdd\007\uffdd\010\uffdd\011\uffdd\035\uffdd\036\uffdd\041\uffdd" +
    "\042\uffdd\063\uffdd\064\uffdd\001\002\000\030\005\uffdf\006" +
    "\uffdf\007\uffdf\010\uffdf\011\uffdf\035\uffdf\036\uffdf\041\uffdf" +
    "\042\uffdf\063\uffdf\064\uffdf\001\002\000\030\005\063\006" +
    "\054\007\066\010\057\011\073\035\uffe5\036\056\041\067" +
    "\042\053\063\uffe5\064\uffe5\001\002\000\004\017\074\001" +
    "\002\000\024\012\uffc8\020\uffc8\024\016\025\uffc8\034\uffc8" +
    "\037\uffc8\040\uffc8\047\uffc8\066\uffc8\001\002\000\004\020" +
    "\076\001\002\000\004\044\077\001\002\000\006\045\uffcf" +
    "\054\100\001\002\000\006\045\uffcf\054\100\001\002\000" +
    "\004\045\102\001\002\000\030\005\uffd1\006\uffd1\007\uffd1" +
    "\010\uffd1\011\uffd1\035\uffd1\036\uffd1\041\uffd1\042\uffd1\063" +
    "\uffd1\064\uffd1\001\002\000\004\045\uffd0\001\002\000\010" +
    "\035\uffe6\063\uffe6\064\uffe6\001\002\000\032\012\uffc8\020" +
    "\uffc8\024\016\025\uffc8\026\uffc8\034\uffc8\037\uffc8\040\uffc8" +
    "\047\uffc8\050\uffc8\053\uffc8\066\uffc8\001\002\000\012\020" +
    "\uffd5\026\110\050\112\053\107\001\002\000\004\020\uffd7" +
    "\001\002\000\004\020\uffd8\001\002\000\004\020\113\001" +
    "\002\000\004\020\uffd6\001\002\000\004\044\114\001\002" +
    "\000\004\060\115\001\002\000\004\045\116\001\002\000" +
    "\030\005\uffd9\006\uffd9\007\uffd9\010\uffd9\011\uffd9\035\uffd9" +
    "\036\uffd9\041\uffd9\042\uffd9\063\uffd9\064\uffd9\001\002\000" +
    "\024\012\uffc8\020\uffc8\024\016\025\uffc8\034\uffc8\037\uffc8" +
    "\040\uffc8\047\uffc8\066\uffc8\001\002\000\004\020\121\001" +
    "\002\000\004\044\122\001\002\000\004\060\123\001\002" +
    "\000\004\045\124\001\002\000\030\005\uffda\006\uffda\007" +
    "\uffda\010\uffda\011\uffda\035\uffda\036\uffda\041\uffda\042\uffda" +
    "\063\uffda\064\uffda\001\002\000\024\012\uffc8\020\uffc8\024" +
    "\016\025\uffc8\034\uffc8\037\uffc8\040\uffc8\047\uffc8\066\uffc8" +
    "\001\002\000\004\020\127\001\002\000\004\044\130\001" +
    "\002\000\004\060\131\001\002\000\004\045\132\001\002" +
    "\000\030\005\uffdc\006\uffdc\007\uffdc\010\uffdc\011\uffdc\035" +
    "\uffdc\036\uffdc\041\uffdc\042\uffdc\063\uffdc\064\uffdc\001\002" +
    "\000\004\017\140\001\002\000\010\035\133\063\uffe8\064" +
    "\uffe8\001\002\000\004\063\136\001\002\000\004\061\uffea" +
    "\001\002\000\006\063\uffe9\064\uffe9\001\002\000\024\012" +
    "\uffc8\020\uffc8\024\016\025\uffc8\034\uffc8\037\uffc8\040\uffc8" +
    "\047\uffc8\066\uffc8\001\002\000\004\020\142\001\002\000" +
    "\026\005\063\006\054\007\066\010\057\011\073\035\uffe5" +
    "\036\056\041\067\042\053\064\uffe5\001\002\000\006\035" +
    "\133\064\uffe8\001\002\000\004\064\145\001\002\000\010" +
    "\035\uffe7\063\uffe7\064\uffe7\001\002\000\024\012\uffc8\020" +
    "\uffc8\024\016\025\uffc8\034\uffc8\037\uffc8\040\uffc8\047\uffc8" +
    "\066\uffc8\001\002\000\004\020\150\001\002\000\004\044" +
    "\151\001\002\000\004\054\152\001\002\000\004\045\153" +
    "\001\002\000\030\005\uffd2\006\uffd2\007\uffd2\010\uffd2\011" +
    "\uffd2\035\uffd2\036\uffd2\041\uffd2\042\uffd2\063\uffd2\064\uffd2" +
    "\001\002\000\024\012\uffc8\020\uffc8\024\016\025\uffc8\034" +
    "\uffc8\037\uffc8\040\uffc8\047\uffc8\066\uffc8\001\002\000\004" +
    "\020\156\001\002\000\004\044\157\001\002\000\004\054" +
    "\160\001\002\000\004\045\161\001\002\000\030\005\uffd3" +
    "\006\uffd3\007\uffd3\010\uffd3\011\uffd3\035\uffd3\036\uffd3\041" +
    "\uffd3\042\uffd3\063\uffd3\064\uffd3\001\002\000\024\012\uffc8" +
    "\020\uffc8\024\016\025\uffc8\034\uffc8\037\uffc8\040\uffc8\047" +
    "\uffc8\066\uffc8\001\002\000\004\020\164\001\002\000\004" +
    "\044\165\001\002\000\004\060\166\001\002\000\004\045" +
    "\167\001\002\000\030\005\uffdb\006\uffdb\007\uffdb\010\uffdb" +
    "\011\uffdb\035\uffdb\036\uffdb\041\uffdb\042\uffdb\063\uffdb\064" +
    "\uffdb\001\002\000\004\065\171\001\002\000\024\012\uffc8" +
    "\020\uffc8\024\016\025\uffc8\034\uffc8\037\uffc8\040\uffc8\047" +
    "\uffc8\066\uffc8\001\002\000\004\020\173\001\002\000\030" +
    "\005\uffd4\006\uffd4\007\uffd4\010\uffd4\011\uffd4\035\uffd4\036" +
    "\uffd4\041\uffd4\042\uffd4\063\uffd4\064\uffd4\001\002\000\010" +
    "\002\uffff\043\uffff\046\uffff\001\002\000\010\002\uffbd\043" +
    "\177\046\uffbd\001\002\000\010\002\uffbd\043\177\046\uffbd" +
    "\001\002\000\004\054\215\001\002\000\006\002\uffb1\046" +
    "\201\001\002\000\004\044\205\001\002\000\006\002\uffb1" +
    "\046\201\001\002\000\004\002\ufffe\001\002\000\004\002" +
    "\uffb2\001\002\000\004\056\206\001\002\000\004\016\207" +
    "\001\002\000\004\054\210\001\002\000\004\050\211\001" +
    "\002\000\004\016\212\001\002\000\004\054\213\001\002" +
    "\000\004\045\214\001\002\000\006\002\uffb0\046\uffb0\001" +
    "\002\000\004\044\216\001\002\000\016\013\uffb8\014\223" +
    "\045\uffb8\051\220\052\225\053\217\001\002\000\004\017" +
    "\uffb6\001\002\000\004\017\uffb5\001\002\000\004\017\234" +
    "\001\002\000\006\013\230\045\uffba\001\002\000\004\017" +
    "\uffb4\001\002\000\016\013\uffb8\014\223\045\uffb8\051\220" +
    "\052\225\053\217\001\002\000\004\017\uffb3\001\002\000" +
    "\006\013\uffb9\045\uffb9\001\002\000\004\045\233\001\002" +
    "\000\004\060\231\001\002\000\004\015\232\001\002\000" +
    "\004\045\uffbb\001\002\000\010\002\uffbc\043\uffbc\046\uffbc" +
    "\001\002\000\004\055\235\001\002\000\004\020\236\001" +
    "\002\000\004\054\237\001\002\000\016\013\uffb7\014\uffb7" +
    "\045\uffb7\051\uffb7\052\uffb7\053\uffb7\001\002\000\006\002" +
    "\uffbe\046\uffbe\001\002\000\004\022\242\001\002\000\004" +
    "\016\317\001\002\000\020\023\244\030\uffee\031\uffee\032" +
    "\uffee\033\uffee\054\uffee\062\uffee\001\002\000\004\017\314" +
    "\001\002\000\016\030\uffec\031\uffec\032\uffec\033\uffec\054" +
    "\246\062\uffec\001\002\000\014\030\uffed\031\uffed\032\uffed" +
    "\033\uffed\062\uffed\001\002\000\014\030\255\031\256\032" +
    "\251\033\252\062\ufff7\001\002\000\004\062\ufffa\001\002" +
    "\000\004\054\306\001\002\000\004\054\300\001\002\000" +
    "\004\062\ufff8\001\002\000\004\062\ufffb\001\002\000\004" +
    "\054\272\001\002\000\004\054\262\001\002\000\004\062" +
    "\261\001\002\000\004\062\ufff9\001\002\000\004\027\ufffc" +
    "\001\002\000\004\057\263\001\002\000\004\017\264\001" +
    "\002\000\006\020\ufff1\054\266\001\002\000\004\020\270" +
    "\001\002\000\010\017\ufff1\020\ufff1\054\266\001\002\000" +
    "\006\017\ufff2\020\ufff2\001\002\000\004\015\271\001\002" +
    "\000\004\062\ufff5\001\002\000\004\057\273\001\002\000" +
    "\004\017\274\001\002\000\006\017\ufff1\054\266\001\002" +
    "\000\004\017\276\001\002\000\004\015\277\001\002\000" +
    "\004\062\ufff6\001\002\000\004\057\301\001\002\000\004" +
    "\017\302\001\002\000\006\020\ufff1\054\266\001\002\000" +
    "\004\020\304\001\002\000\004\015\305\001\002\000\004" +
    "\062\ufff3\001\002\000\004\057\307\001\002\000\004\017" +
    "\310\001\002\000\006\020\ufff1\054\266\001\002\000\004" +
    "\020\312\001\002\000\004\015\313\001\002\000\004\062" +
    "\ufff4\001\002\000\004\065\315\001\002\000\004\020\316" +
    "\001\002\000\016\030\uffef\031\uffef\032\uffef\033\uffef\054" +
    "\uffef\062\uffef\001\002\000\004\060\320\001\002\000\004" +
    "\015\321\001\002\000\020\023\ufff0\030\ufff0\031\ufff0\032" +
    "\ufff0\033\ufff0\054\ufff0\062\ufff0\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\320\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\054\005\001\001\000\004\003\007\001\001\000\004" +
    "\056\240\001\001\000\004\015\010\001\001\000\002\001" +
    "\001\000\004\057\012\001\001\000\002\001\001\000\006" +
    "\034\014\036\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\037\017\001\001\000\004\040\024\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\041\030\042\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\035" +
    "\035\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\053\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\020\061\021\071\022\054\023\057\024\060\025" +
    "\063\027\051\030\070\031\064\032\067\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\016\134\017\133\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\020\103\021\071\022\054\023\057\024\060" +
    "\025\063\027\051\030\070\031\064\032\067\001\001\000" +
    "\002\001\001\000\006\034\074\036\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\033\100\001\001\000" +
    "\004\033\102\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\034\105\036" +
    "\016\001\001\000\004\026\110\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\034\117\036\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\034\125\036\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\016" +
    "\136\017\133\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\034\140\036\016\001\001\000" +
    "\002\001\001\000\026\020\142\021\071\022\054\023\057" +
    "\024\060\025\063\027\051\030\070\031\064\032\067\001" +
    "\001\000\006\016\143\017\133\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\034\146\036\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\034\154\036\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\034\162\036" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\034\171\036\016\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\055\174\001\001\000\006\043" +
    "\177\044\175\001\001\000\006\043\237\044\175\001\001" +
    "\000\002\001\001\000\006\051\202\052\201\001\001\000" +
    "\002\001\001\000\006\051\203\052\201\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\046\221\047\223\050\220\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\045\226\001\001\000\002\001\001\000\010\046\225" +
    "\047\223\050\220\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\242\001\001\000\002\001\001\000" +
    "\004\013\244\001\001\000\002\001\001\000\004\014\246" +
    "\001\001\000\002\001\001\000\014\004\256\005\253\006" +
    "\247\007\257\010\252\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\264\001\001\000\002\001\001" +
    "\000\004\011\266\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\274\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\302\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\310\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
      action_obj.setConsola(consola);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /**Metodo al que se llama automáticamente ante algún error sintactico.*/
    public void syntax_error(Symbol s){
        System.out.println("Error en la Línea " + (s.right+1) +" Columna "+s.left+ ". Identificador "
        +s.value + " no reconocido." );
         this.consola.setText(this.consola.getText()+"\n"+"Error en la Línea " + (s.right+1)+ "Columna "+s.left+". Identificador " +
        s.value + " no reconocido.");
    }

    /**Metodo al que se llama en el momento en que ya no es posible una recuperación de
    errores.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Error en la Línea " + (s.right+1)+ "Columna "+s.left+". Identificador " +
        s.value + " no reconocido.");
        this.consola.setText(this.consola.getText()+"\n"+"Error en la Línea " + (s.right+1)+ "Columna "+s.left+". Identificador " +
        s.value + " no reconocido.");
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintactico$actions {
    JTextPane consola;

    public void setConsola(JTextPane consola) {
        this.consola = consola;
    }

   


//ingresar codigo java

  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // USUARIO_NO ::= USUARIO INICIO_SECCION USID ASIGNACION ALFANUMERICO CONTRASENA ASIGNACION ALFANUMERICO FIN_SECCION 
            {
              Object RESULT =null;
		 System.out.println("user reconocido"); 
                 this.consola.setText(this.consola.getText()+"\n"+"Usuario reconocido");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("USUARIO_NO",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // USUARIOS_NO ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("USUARIOS_NO",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // USUARIOS_NO ::= USUARIO_NO USUARIOS_NO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("USUARIOS_NO",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // TIPOVAR_NO ::= CARACTER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPOVAR_NO",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // TIPOVAR_NO ::= BOOL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPOVAR_NO",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // TIPOVAR_NO ::= VAR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPOVAR_NO",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // TIPOVAR_NO ::= NUMERO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPOVAR_NO",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // COLUMNA_NO ::= TIPOVAR_NO INICIO_ATRIBUTOS INT FIN_ATRIBUTOS ALFANUMERICO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COLUMNA_NO",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // COLUMNAS_NO ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COLUMNAS_NO",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // COLUMNAS_NO ::= COLUMNA_NO COLUMNAS_NO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COLUMNAS_NO",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // RESTRICCIONES_NO ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RESTRICCIONES_NO",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // RESTRICCIONES_NO ::= PKEY KADENA ENDLINE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RESTRICCIONES_NO",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // CLASE_NO ::= CLASE ALFANUMERICO INICIO_SECCION COLUMNAS_NO RESTRICCIONES_NO FIN_SECCION 
            {
              Object RESULT =null;
		 System.out.println("Clase reconocida");
                 this.consola.setText(this.consola.getText()+"\n"+"Clase reconocida");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASE_NO",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // CLASES_NO ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASES_NO",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // CLASES_NO ::= CLASE_NO CLASES_NO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASES_NO",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // METODOS ::= PASS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOS",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // METODOS ::= PRESS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOS",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // METODOS ::= REFRESH 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOS",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // FUNCIONES_NO ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_NO",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // FUNCIONES_NO ::= METODOS ASIGNACION ALFANUMERICO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_NO",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ESTILOS_NO ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ESTILOS_NO",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ESTILOS_NO ::= ESTILOS ASIGNACION ALFANUMERICO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ESTILOS_NO",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ALTO_NO ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ALTO_NO",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ALTO_NO ::= ALTO ASIGNACION INT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ALTO_NO",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ANCHO_NO ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ANCHO_NO",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ANCHO_NO ::= ANCHO ASIGNACION INT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ANCHO_NO",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ID_NO ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ID_NO",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ID_NO ::= IDE ASIGNACION ALFANUMERICO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ID_NO",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // HREF_NO ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("HREF_NO",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // HREF_NO ::= HREF ASIGNACION RUTA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("HREF_NO",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ATRIBUTOS_NO ::= ANCHO_NO ALTO_NO ESTILOS_NO FUNCIONES_NO ID_NO HREF_NO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS_NO",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ITEMS_NO ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ITEMS_NO",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ITEMS_NO ::= ALFANUMERICO ITEMS_NO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ITEMS_NO",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // LISTA_NO ::= LISTA INICIO_ATRIBUTOS ATRIBUTOS_NO FIN_ATRIBUTOS INICIO_SECCION ITEMS_NO FIN_SECCION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_NO",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CHECK_NO ::= OK INICIO_ATRIBUTOS ATRIBUTOS_NO FIN_ATRIBUTOS INICIO_SECCION ALFANUMERICO FIN_SECCION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CHECK_NO",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // BOTON_NO ::= BOTON INICIO_ATRIBUTOS ATRIBUTOS_NO FIN_ATRIBUTOS INICIO_SECCION ALFANUMERICO FIN_SECCION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BOTON_NO",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // IMAGEN_NO ::= IMAGEN INICIO_ATRIBUTOS RUTA ATRIBUTOS_NO FIN_ATRIBUTOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMAGEN_NO",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TIPO_NO ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO_NO",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TIPO_NO ::= CONTRASENA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO_NO",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TIPO_NO ::= NUMERO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO_NO",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TIPO_NO ::= TEXTO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO_NO",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // INPUT_NO ::= ENTRADA INICIO_ATRIBUTOS ATRIBUTOS_NO TIPO_NO FIN_ATRIBUTOS INICIO_SECCION KADENA FIN_SECCION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INPUT_NO",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // P_NO ::= PARRAFO INICIO_ATRIBUTOS ATRIBUTOS_NO FIN_ATRIBUTOS INICIO_SECCION KADENA FIN_SECCION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("P_NO",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // H2_NO ::= SUBT INICIO_ATRIBUTOS ATRIBUTOS_NO FIN_ATRIBUTOS INICIO_SECCION KADENA FIN_SECCION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("H2_NO",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // H1_NO ::= SUB INICIO_ATRIBUTOS ATRIBUTOS_NO FIN_ATRIBUTOS INICIO_SECCION KADENA FIN_SECCION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("H1_NO",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // COMPONENTE_NO ::= LISTA_NO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COMPONENTE_NO",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // COMPONENTE_NO ::= CHECK_NO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COMPONENTE_NO",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // COMPONENTE_NO ::= BOTON_NO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COMPONENTE_NO",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // COMPONENTE_NO ::= IMAGEN_NO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COMPONENTE_NO",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // COMPONENTE_NO ::= INPUT_NO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COMPONENTE_NO",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // COMPONENTE_NO ::= P_NO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COMPONENTE_NO",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // COMPONENTE_NO ::= H2_NO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COMPONENTE_NO",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // COMPONENTE_NO ::= H1_NO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COMPONENTE_NO",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // COMPONENTES_NO ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COMPONENTES_NO",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // COMPONENTES_NO ::= COMPONENTE_NO COMPONENTES_NO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COMPONENTES_NO",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SECCION_NO ::= SECCION INICIO_ATRIBUTOS ATRIBUTOS_NO FIN_ATRIBUTOS COMPONENTES_NO SECCIONES_NO SECCION_FIN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SECCION_NO",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SECCIONES_NO ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SECCIONES_NO",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SECCIONES_NO ::= SECCION_NO SECCIONES_NO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SECCIONES_NO",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // BODY_NO ::= CUERPO NT$3 INICIO_ATRIBUTOS ATRIBUTOS_NO FIN_ATRIBUTOS COMPONENTES_NO SECCIONES_NO CUERPO_FIN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		 System.out.println("end body"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BODY_NO",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$3 ::= 
            {
              Object RESULT =null;
 System.out.println("body"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$3",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INFO_NO ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INFO_NO",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INFO_NO ::= ALFANUMERICO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INFO_NO",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LIBRERIAS_NO ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LIBRERIAS_NO",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LIBRERIAS_NO ::= LIBRERIAS INICIO_ATRIBUTOS RUTA FIN_ATRIBUTOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LIBRERIAS_NO",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TITULO_NO ::= TITULO ASIGNACION KADENA ENDLINE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TITULO_NO",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VALORES_NO ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALORES_NO",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VALORES_NO ::= ALFANUMERICO VALORES_NO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALORES_NO",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DELETE_NO ::= ELIMINAR ALFANUMERICO VALORES INICIO_ATRIBUTOS VALORES_NO FIN_ATRIBUTOS ENDLINE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DELETE_NO",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // UPDATE_NO ::= ACTUALIZAR ALFANUMERICO VALORES INICIO_ATRIBUTOS VALORES_NO FIN_ATRIBUTOS ENDLINE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("UPDATE_NO",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // READ_NO ::= LEER ALFANUMERICO VALORES INICIO_ATRIBUTOS VALORES_NO FIN_ATRIBUTOS ENDLINE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("READ_NO",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CREATE_NO ::= CREAR ALFANUMERICO VALORES INICIO_ATRIBUTOS VALORES_NO INICIO_ATRIBUTOS ENDLINE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CREATE_NO",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CRUD ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CRUD",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CRUD ::= DELETE_NO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CRUD",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CRUD ::= UPDATE_NO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CRUD",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CRUD ::= READ_NO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CRUD",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CRUD ::= CREATE_NO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CRUD",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // HEAD_NO ::= ENCABEZADO NT$2 TITULO_NO LIBRERIAS_NO INFO_NO CRUD ENCABEZADO_FIN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		 System.out.println("end head"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("HEAD_NO",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$2 ::= 
            {
              Object RESULT =null;
 System.out.println("head"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$2",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LP ::= MAIN NT$0 HEAD_NO BODY_NO MAIN_FIN NT$1 CLASES_NO USUARIOS_NO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LP",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
             System.out.println("end page"); 
        this.consola.setText(this.consola.getText()+"\n"+"Pagina reconocida");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$1",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
 System.out.println("<HTML>"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$0",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= LP EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

